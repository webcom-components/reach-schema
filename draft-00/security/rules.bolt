/*********************************************
 * Functions definitions
 *********************************************/

hasRole(participants) { participants[auth.uid].role != null }
roleIs(participants, userRole) { participants[auth.uid].role == userRole }

isAuthenticated() { (auth != null) }
isUser(uid) { (auth != null && auth.uid == uid) }
isParticipant(participants) { (auth != null && participants[auth.uid] != null) }
isParticipantWithRole(participants) { (isParticipant(participants) && hasRole(participants)) }
isOwner(participants) { (isParticipantWithRole(participants) && roleIs(participants, 'OWNER')) }
isModerator(participants) { (isParticipantWithRole(participants) && roleIs(participants, 'MODERATOR')) }

/*********************************************
 * Type definitions
 *********************************************/

/*+++++++++++++++++++++++++++
 * ICE servers
 *++++++++++++++++++++++++++*/
type ICEServer {
  url: String
  user: String | Null
  pwd: String | Null
}

/*+++++++++++++++++++++++++++
 * User
 *++++++++++++++++++++++++++*/
type User {
  name: String
  status: String
  lastSeen: Number
  devices: Device[]
}

/*+++++++++++++++++++++++++++
 * Device
 *++++++++++++++++++++++++++*/
type Device {
  status: DeviceStatus
  sdk_version: SdkVersion
  os: String | Null
  userAgent: String | Null
}
type DeviceStatus extends String {
  validate() { this == 'CONNECTED' || this == 'DISCONNECTED' || this == 'SLEEPING' }
}
type SdkVersion extends String {
  //validate() { this.test(/^((js)|(android)|(ios))_(\d+\.\d+\.\d+)$/) }
}

/*+++++++++++++++++++++++++++
 * Room
 *++++++++++++++++++++++++++*/
type Room {
  name: String
  owner: String
  status: String
  _created: Number
  _closed: Number | Null
}

type RoomData {

}

/*+++++++++++++++++++++++++++
 * Participant
 *++++++++++++++++++++++++++*/
type Participant {
  status: String | Null
  role: Role
  invitation: String | Null
  _joined: Number | Null
}
type Role extends String {
  validate() { this == 'OWNER' || this == 'MODERATOR' || this == 'NONE' }
}

/*+++++++++++++++++++++++++++
 * Stream
 *++++++++++++++++++++++++++*/
type Stream {
  from: String
  device: String
  type: StreamType
  subscribers: Subscriber[] | Null
}
type StreamType extends String {
  validate() { this == 'audio' || this == 'video' || this == 'audio-video' || this == 'chat' }
}
type Subscriber {
  to: String
  pc: String
  _created: Number
}

/*+++++++++++++++++++++++++++
 * Message
 *++++++++++++++++++++++++++*/
type Message {
  from: String
  text: String
  _created: Number
  _end: Null | Number
}

/*+++++++++++++++++++++++++++
 * Invitation
 *++++++++++++++++++++++++++*/
type Invitation {
  from: String
  roomId: String
  status: InvitationStatus
  topic: Null | String
  _created: Number
  _end: Number | Null
}
type InvitationStatus extends String {
  validate() { this == 'ONGOING' || this == 'ACCEPTED' || this == 'REJECTED' || this == 'CANCELED' }
}

/*+++++++++++++++++++++++++++
 * PeerConnection
 *++++++++++++++++++++++++++*/
type PeerConnection {
  peer1: String,
  peer1DeviceId: PeerConnectionDevice,
  peer2: String,
  peer2DeviceId: PeerConnectionDevice
}

type PeerConnectionDevice {
  answer: String | Null
  offer: String | Null
  medias: String[] | Null
  ice: ICECandidate[]
  validate() { this.answer != null || this.offer != null }
}

type ICECandidate {
  candidate: String
  sdpMid: String
  sdpMLineIndex: Number
}

/*********************************************
 * Access rules
 *********************************************/

/*+++++++++++++++++++++++++++
 * ICE servers
 *++++++++++++++++++++++++++*/

// Everybody can see the ice servers
path /_iceServers is ICEServer[] {
  read() { true }
}


/*+++++++++++++++++++++++++++
 * Users
 *++++++++++++++++++++++++++*/

// Only authenticated users can the the Users list
path /users {
  read() { isAuthenticated() }
}

// Only the user can modify its data
path /users/{userId} is User {
  write() { isUser(key()) }
}


/*+++++++++++++++++++++++++++
 * Rooms
 *++++++++++++++++++++++++++*/

// Only authenticated users can the the Rooms list
path /rooms {
  read() { isAuthenticated() }
}

// Only owner & moderators can modify the room
path /rooms/{roomId} is Room {
  write() { isParticipantWithRole(this.participants) }
}

path /_rooms/{roomId} is RoomData {
  read() { isParticipant(this.participants) }
}

// Only the concerned participant, the owner and the moderators can see modify a participant
path /_rooms/{roomId}/participants/{userId} is Participant {
  write() { isParticipantWithRole(ref.parent()) || isUser(key())}
}
/*path /_rooms/{roomId}/participants/{userId}/status {
  write() { isUser(userId)}
}
path /_rooms/{roomId}/participants/{userId}/_joined {
  write() { isUser(userId)}
}*/
// Only participants can see the streams list
path /_rooms/{roomId}/streams {
  read() { isParticipant(ref.parent().participants) }
}

// Only the stream publisher, the owner and the moderators can see modify a stream
path /_rooms/{roomId}/streams/{streamId} is Stream {
  write() { isUser(this.from) || isParticipantWithRole(ref.parent().parent().participants) }
}

// Participants can subscribe to a stream
path /_rooms/{roomId}/streams/{streamId}/subscribers {
  write() { isParticipant(ref.parent().parent().parent().participants) }
}

// Only participants can see/write the messages list
path /_rooms/{roomId}/messages is Message[] {
  read() { isParticipant(this.parent().participants) }
  write() { isParticipant(this.parent().participants) }
}


/*+++++++++++++++++++++++++++
 * Invitations
 *++++++++++++++++++++++++++*/

path /invites/{userId} {
  read() { isUser(userId) }
  write() { isUser(userId) }
}
path /invites/{userId}/{invitationId} is Invitation {
  read() { isUser(userId) || isUser(this.from) }
  write() { isUser(userId) || isUser(this.from) }
}


/*+++++++++++++++++++++++++++
 * WebRTC
 *++++++++++++++++++++++++++*/

path /_webrtc/{pubsubId}/{peerCoId} is PeerConnection {
  read() { isUser(this.peer1) || isUser(this.peer2) }
  write() { isUser(this.peer1) || isUser(this.peer2) }
}