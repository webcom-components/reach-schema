/**************************************
* Global definitions
**************************************/

type Extra extends Object {
    extra: Null | Any
}

isAuthenticated() { (auth != null) }
isUser(uid) { (auth.uid == uid) }

/**************************************
* Users
**************************************/

type User extends Extra {
    name: Null | String
    status: Null | String
    lastSeen: Null | Number
}

type Device {
    status: DeviceStatus
    sdk: DeviceSdk
    os: Null | String
    userAgent: Null | String
}

type DeviceSdk {
	reach: String
	webcom: String
}

type DeviceStatus extends String {
    validate() { this == 'CONNECTED' || this == 'DISCONNECTED' || this == 'NOT_CONNECTED' || this == 'SLEEPING' }
}

// Only authenticated users can read the Users list
path /users {
    read() { isAuthenticated() }
}

// Only the user can modify its data
path /users/{userId} is User {
    write() { isAuthenticated() && isUser(userId) }
}

// Only the user can see/modify its devices
path /_/devices/{userId} is Device[] {
    read() { isUser(userId) }
    write() { isUser(userId) }
}

/**************************************
* Rooms
**************************************/

type Room extends Extra {
    name: Null | String
    owner: Null | String
    status: Null | String
    _created: Null | Number
    _closed: Null | Number
}

type RoomMeta extends Extra {
    name: Null | String
    owner: Null | String
}

// Only authenticated users can read the Rooms list
path /rooms {
    read() { isAuthenticated() }
}
// Only owner can modify the room
path /rooms/{roomId} is Room {
    write() { isAuthenticated() && (prior(this) == null || isUser(prior(this).owner)) }
}
// Only participants can read the private room data
path /_/rooms/{roomId} {
    read() { isAuthenticated() && this.participants[auth.uid] != null }
}

path /_/rooms/{roomId}/meta is RoomMeta {
    write() { isAuthenticated() && (prior(this) == null || isUser(prior(this).owner)) }
}

isOwner(child) { child.parent().parent().meta.owner == auth.uid }
isParticipant(child) { child.parent().parent().participants[auth.uid] != null }
isModerator(child) { child.parent().parent().participants[auth.uid].role == 'MODERATOR' }

/**************************************
* Participants
**************************************/

type Participant extends Extra {
    status: Null | String
    role: Null | Role
    _joined: Null | Number
}

type Role extends String {
    validate() { this == 'OWNER' || this == 'MODERATOR' || this == 'NONE' }
}

// The Owner can write in the participants list of his room
// The Moderator can write anywhere in the participants list but not elevate his role
// The participant can only write his data but not elevate his role
path /_/rooms/{roomId}/participants/{userId} is Participant {
    write() {
        isAuthenticated() && (
            isOwner(this) ||
			isModerator(prior(this)) ||
            (isUser(userId) && prior(this) != null && (this.role == null || this.role == 'NONE'))
        )
    }
}

/**************************************
* Messages
**************************************/

type Message {
    from: String
    text: String
    _created: Number
    _end: Null | Number
}

path /_/rooms/{roomId}/messages/{msgId} is Message {
    write() {
        isAuthenticated() &&
        (
			(prior(this) == null && isUser(this.from) && isParticipant(prior(this))) ||
			(prior(this) != null && (isOwner(this) || isModerator(this) || isUser(prior(this).from)))
        )
    }
}

/**************************************
* Streams
**************************************/

type StreamData {
    from: Null | String
    device: Null | String
    type: Null | StreamType
}

type StreamType extends String {
    validate() { this == 'audio' || this == 'video' || this == 'audio-video' || this == 'chat' }
}

type Subscriber {
    to: Null | String
    _created: Null | Number
}

path /_/rooms/{roomId}/streams/{streamId} is StreamData {
    write() {
        isAuthenticated() &&
        (
            isOwner(this) || isModerator(prior(this)) ||
            (
                isParticipant(prior(this)) &&
                (
                    prior(this) == null || isUser(prior(this.from))
                )
            )
        )
    }
}

path /_/rooms/{roomId}/subscribers/{streamId} is Subscriber[] {
    write() {
        isAuthenticated() &&
        (
            isOwner(this) || isModerator(this) ||
            (
                isParticipant(this) &&
                (
                    prior(this[key()]) == null ||
                    isUser(prior(this[key()].to))
                )
            )
        )
    }
}

/**************************************
* Invitations
**************************************/

type Invitation {
    from: Null | String
    room: Null | String
    status: Null | InvitationStatus
    topic: Null | String
    _created: Null | Number
    _end: Null | Number
}

type InvitationStatus extends String {
    validate() { this == 'ONGOING' || this == 'ACCEPTED' || this == 'REJECTED' || this == 'CANCELED' }
}

path /_/invites {
	read() { isAuthenticated()}
}

path /_/invites/{userId}/{invitationId} is Invitation {
    write() {
        isAuthenticated() &&
        (
            isUser(userId) ||
            (prior(this) == null && isUser(this.from)) ||
            (isUser(prior(this.from)))
        )
    }
}


/**************************************
* WebRTC
**************************************/

type PeerConnection {
    sdp: SDP
    ice: ICECandidate[]
}

type SDP {
	type: String,
	sdp: String
}

type ICECandidate {
    candidate: String
    sdpMid: String
    sdpMLineIndex: Number
}

path /_/webrtc/{deviceIds} {
    read() { isAuthenticated() && this[auth.uid] != null }
    write() {
        isAuthenticated() &&
        (
            (prior(this) != null && prior(this)[auth.uid] != null) ||
            (prior(this) == null && this[auth.uid] != null)
        )
    }
}

path /_/webrtc/{deviceIds}/{streamId}/{deviceId} is PeerConnection;

/**************************************
* ICE servers
**************************************/

type ICEServer {
    urls: String | String[]
    user: Null | String
    pwd: Null | String
}

// Everybody can see the ice servers
path /_/ice is ICEServer[] {
    read() { true }
}
