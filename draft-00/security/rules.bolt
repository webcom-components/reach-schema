/**************************************
* Global definitions
**************************************/

type Extra extends Object {
    extra: Null | Any
}

isAuthenticated() { (auth != null) }
isUser(uid) { (auth.uid == uid) }
isParticipant(roomId) { root._.rooms[roomId] != null && root._.rooms[roomId].participants != null && root._.rooms[roomId].participants[auth.uid] != null && root._rooms[roomId].participants[auth.uid]._joined != null }
isModerator(roomId) { isParticipant(roomId) && root._rooms[roomId].participants[auth.uid].role == 'MODERATOR'}
isOwner(roomId) { root.rooms[roomId] != null && root.rooms[roomId].owner == auth.uid }


/**************************************
* Users
**************************************/

type User extends Extra {
    name: Null | String
    status: Null | String
    lastSeen: Null | Number
}

type Device {
    status: DeviceStatus
    sdk_version: Null | String
    os: Null | String
    userAgent: Null | String
}

type DeviceStatus extends String {
    validate() { this == 'CONNECTED' || this == 'DISCONNECTED' || this == 'SLEEPING' }
}

// Only authenticated users can read the Users list
path /users {
    read() { isAuthenticated() }
}

// Only the user can modify its data
path /users/{userId} is User {
    write() { isAuthenticated() && isUser(userId) }
}

// Only the user can see/modify its devices
path /_/devices/{userId} is Device[] {
    read() { isUser(userId) }
    write() { isUser(userId) }
}

/**************************************
* Rooms
**************************************/

type Room extends Extra {
    name: Null | String
    owner: Null | String
    status: Null | String
    _created: Null | Number
    _closed: Null | Number
}

// Only authenticated users can read the Rooms list
path /rooms {
    read() { isAuthenticated() }
}
// Only owner can modify the room
path /rooms/{roomId} is Room {
    write() { isAuthenticated() && (prior(this) == null || prior(this).owner == auth.uid ) }
}
// Only participants can read the private room data
path /_/rooms/{roomId} {
    read() { isAuthenticated() && this.participants[auth.uid] != null }
}
/**************************************
* Participants
**************************************/

type Participant extends Extra {
    status: Null | String
    role: Null | Role
    _joined: Null | Number
}

type Role extends String {
    validate() { this == 'OWNER' || this == 'MODERATOR' || this == 'NONE' }
}

// The Owner can write in the participants list of his room
// The Moderator can write anywhere in the participants list but not elevate his role
// The participant can only write his data but not elevate his role
path /_/rooms/{roomId}/participants/{userId} is Participant {
    write() {
        isAuthenticated() && (
            isOwner(roomId) ||
            (
                prior(this).parent()[auth.uid] != null &&
                prior(this).parent()[auth.uid].role == 'MODERATOR' &&
                (this == null || this.role == 'MODERATOR' || this.role == 'NONE')
            ) ||
            (
                isUser(userId) &&
                prior(this) != null &&
                (this.role == null || this.role == 'NONE')
            )
        )
    }
}

/**************************************
* Messages
**************************************/

type Message {
    from: String
    text: String
    _created: Number
    _end: Null | Number
}

path /_/rooms/{roomId}/messages/{msgId} is Message {
    write() {
        isAuthenticated() &&
        (
            isOwner(roomId) ||
            (
                prior(this).parent().parent().participants[auth.uid] != null &&
                (
                    prior(this).parent().parent().participants[auth.uid].role == 'MODERATOR' ||
                    prior(this) == null ||
                    isUser(prior(this).from)
                )
            )
        )
    }
}

/**************************************
* Streams
**************************************/

type StreamData {
    from: Null | String
    device: Null | String
    type: Null | StreamType
}

type StreamType extends String {
    validate() { this == 'audio' || this == 'video' || this == 'audio-video' || this == 'chat' }
}

type Subscriber {
    to: Null | String
    pc: Null | String
    _created: Null | Number
}

path /_/rooms/{roomId}/streams/{streamId} is StreamData {
    write() {
        isAuthenticated() &&
        (
            isOwner(roomId) ||
            (
                prior(this).parent().parent().participants[auth.uid] != null &&
                (
                    prior(this).parent().parent().participants[auth.uid].role == 'MODERATOR' ||
                    prior(this) == null ||
                    isUser(prior(this.from))
                )
            )
        )
    }
}

path /_/rooms/{roomId}/subscribers/{streamId} is Subscriber[] {
    write() {
        isAuthenticated() &&
        (
            isOwner(roomId) ||
            (
                prior(this).parent().parent().participants[auth.uid] != null &&
                (
                    prior(this).parent().parent().participants[auth.uid].role == 'MODERATOR' ||
                    prior(this).parent().parent().streams[streamId].from == auth.uid ||
                    prior(this[key()]) == null ||
                    isUser(prior(this[key()].to))
                )
            )
        )
    }
}

/**************************************
* Invitations
**************************************/

type Invitation {
    from: Null | String
    room: Null | String
    status: Null | InvitationStatus
    topic: Null | String
    _created: Null | Number
    _end: Null | Number
}

type InvitationStatus extends String {
    validate() { this == 'ONGOING' || this == 'ACCEPTED' || this == 'REJECTED' || this == 'CANCELED' }
}

path /_/invites/{userId}/{invitationId} is Invitation {
    read() { isAuthenticated() && (isUser(userId) || isUser(this.from)) }
    write() {
        isAuthenticated() &&
        (
            isUser(userId) ||
            (prior(this) == null && isUser(this.from) && (isOwner(this.room) || root._.rooms[this.room].participants[auth.uid].role == 'MODERATOR'))) ||
            (isUser(prior(this.from)))
        )
    }
}


/**************************************
* WebRTC
**************************************/
type PeerConnections {
    peers: String[]
}

type PeerConnectionDevice {
    answer: Null | String
    offer: Null | String
    medias: Null | String[]
    ice: ICECandidate[]
    validate() { this.answer != null || this.offer != null }
}

type ICECandidate {
    candidate: String
    sdpMid: String
    sdpMLineIndex: Number
}

path /_/webrtc/{deviceIds} is PeerConnections {
    read() { isAuthenticated() && this.peers[auth.uid] != null }
    write() { isAuthenticated() && ((prior(this) == null && this.peers[auth.uid] != null) || (prior(this.peers[auth.uid]) != null)) }
}
path /_/webrtc/{deviceIds}/connections/{peerCoId}/{deviceId} is PeerConnectionDevice;

/**************************************
* ICE servers
**************************************/

type ICEServer {
    url: String
    user: Null | String
    pwd: Null | String
}

// Everybody can see the ice servers
path /_/ice is ICEServer[] {
    read() { true }
}
